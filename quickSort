#include <stdio.h>

// 交换函数
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// 分区函数
int partition(int array[], int low, int high) {
    int pivot = array[low];  // 选择第一个元素作为枢轴
    int i = low + 1;  // 从第二个元素开始
    int j = high;

    while (1) {
        while (i <= high && array[i] < pivot) {
            i++;
        }
        while (j >= low && array[j] > pivot) {
            j--;
        }
        if (i < j) {
            swap(&array[i], &array[j]);
        }
        else {
            break;
        }
    }
    swap(&array[low], &array[j]);
    return j;
}

// 快速排序函数
void quickSort(int array[], int low, int high) {
    if (low < high) {
        // 分区索引
        int pi = partition(array, low, high);

        // 分别排序分区
        quickSort(array, low, pi - 1);
        quickSort(array, pi + 1, high);
    }
}

// 打印数组函数
void printArray(int array[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
}

int main() {
    int data[] = { 8, 7, 6, 1, 0, 9, 2 };
    int n = sizeof(data) / sizeof(data[0]);
    printf("Unsorted Array:\n");
    printArray(data, n);

    quickSort(data, 0, n - 1);

    printf("Sorted array in ascending order:\n");
    printArray(data, n);
    return 0;
}
